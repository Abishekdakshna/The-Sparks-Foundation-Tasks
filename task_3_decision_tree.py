# -*- coding: utf-8 -*-
"""Task 3 Decision Tree

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ytJGxtdCyiqiTlsei5sNhttR-pHWPXAH
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import plot_tree

file_path = '/content/SampleSuperstore.csv'
df = pd.read_csv(file_path)

# Display the first few rows of the dataset
print(df.head())

# Check the summary statistics
print(df.describe())

# Check for missing values
print(df.isnull().sum())

# Check data types and column names
print(df.info())

# Visualize distribution of profits
plt.figure(figsize=(10, 6))
sns.histplot(df['Profit'])
plt.title('Distribution of Profit')
plt.xlabel('Profit')
plt.ylabel('Frequency')
plt.show()

# Visualize sales across different regions
plt.figure(figsize=(10, 6))
sns.barplot(x='Region', y='Sales', data=df)
plt.title('Sales across Regions')
plt.xlabel('Region')
plt.ylabel('Sales')
plt.show()

# Visualize profit by category
plt.figure(figsize=(10, 6))
sns.boxplot(x='Category', y='Profit', data=df)
plt.title('Profit by Category')
plt.xlabel('Category')
plt.ylabel('Profit')
plt.show()

# Visualize sales vs. profit
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Sales', y='Profit', data=df)
plt.title('Sales vs. Profit')
plt.xlabel('Sales')
plt.ylabel('Profit')
plt.show()

# Define features (X) and target variable (y)
X = df[['Sales', 'Region']]
y = df['Profit']

# Example: Categorize 'Profit' into three categories
labels = ['Low Profit', 'Medium Profit', 'High Profit']
y_categorical = pd.cut(y, bins=3, labels=labels)

# One-hot encode the 'Region' column
X_encoded = pd.get_dummies(X, columns=['Region'])

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y_categorical, test_size=0.2, random_state=42)

# Initialize the Decision Tree Classifier
clf = DecisionTreeClassifier(random_state=42)

# Train the classifier
clf.fit(X_train, y_train)

# Predict on the test set
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy of Decision Tree Classifier: {accuracy:.2f}")

# Classification report
print(classification_report(y_test, y_pred))

# Compare actual vs predicted
comparison_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(comparison_df.head(10))

# Assuming clf is your trained DecisionTreeClassifier
plt.figure(figsize=(12, 8))
plot_tree(clf, filled=True, feature_names=X_encoded.columns, class_names=labels)
plt.title("Decision Tree Visualization")
plt.show()

# Example prediction for new data points
new_data = pd.DataFrame({'Sales': [500, 1000], 'Region': ['East', 'West']})

# One-hot encode the 'Region' column in new_data
new_data_encoded = pd.get_dummies(new_data, columns=['Region'])

# Ensure all necessary columns are present (including missing one-hot encoded columns if needed)
missing_columns = set(X_encoded.columns) - set(new_data_encoded.columns)
for col in missing_columns:
    new_data_encoded[col] = 0

# Reorder columns to match the order used during training
new_data_encoded = new_data_encoded[X_encoded.columns]

# Predict using the classifier
predicted_classes = clf.predict(new_data_encoded)
print(f"Predicted Profit Categories for new data: {predicted_classes}")

# Already calculated above, but here's how you could display it again
print(f"Accuracy of Decision Tree Classifier: {accuracy:.2f}")

