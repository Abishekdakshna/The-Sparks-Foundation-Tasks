# -*- coding: utf-8 -*-
"""Task-1 Prediction using Supervised ML (Linear Regression)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_He8UISL5JF3qKgjvs0Dxw_GT93mYRd2

Author : Abishekdakshna R

Task 1 : Prediction using Supervised Machine Learning

GRIP @ The Sparks Foundation
"""



import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split

# Load the dataset from GitHub
url = 'https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv'
df = pd.read_csv(url)

# Display the first few rows of the dataset
print(df.head())

# Prepare the data
X = df[['Hours']].values  # Features
y = df['Scores'].values   # Target

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Visualize the training data
plt.scatter(X_train, y_train, color='blue')
plt.title('Hours vs Percentage (Training Data)')
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.show()

# Train the algorithm
model = LinearRegression()
model.fit(X_train, y_train)

# Plot the regression line on training data
line = model.coef_ * X_train + model.intercept_
plt.scatter(X_train, y_train, color='blue')
plt.plot(X_train, line, color='red')
plt.title('Hours vs Percentage (Training Data with Regression Line)')
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.show()

# Make predictions
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)
hours_to_predict = np.array([[9.25]])
predicted_score = model.predict(hours_to_predict)

# Evaluate the model
train_mse = mean_squared_error(y_train, y_train_pred)
train_r2 = r2_score(y_train, y_train_pred)
test_mse = mean_squared_error(y_test, y_test_pred)
test_r2 = r2_score(y_test, y_test_pred)

# Plot predictions vs actual values for training data
plt.scatter(y_train, y_train_pred, color='blue')
plt.plot([min(y_train), max(y_train)], [min(y_train), max(y_train)], color='red', linewidth=2)
plt.title('Actual vs Predicted Scores (Training Data)')
plt.xlabel('Actual Scores')
plt.ylabel('Predicted Scores')
plt.show()

# Plot predictions vs actual values for test data
plt.scatter(y_test, y_test_pred, color='blue')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linewidth=2)
plt.title('Actual vs Predicted Scores (Test Data)')
plt.xlabel('Actual Scores')
plt.ylabel('Predicted Scores')
plt.show()

# Difference between actual and predicted values
difference = y_test - y_test_pred
diff_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_test_pred, 'Difference': difference})
print(diff_df)

# Output results
print(f"Predicted Score for 9.25 hours of study: {predicted_score[0]:.2f}")
print(f"Training Mean Squared Error: {train_mse:.2f}")
print(f"Training R^2 Score: {train_r2:.2f}")
print(f"Test Mean Squared Error: {test_mse:.2f}")
print(f"Test R^2 Score: {test_r2:.2f}")